## set replicaset
replicaCount: 1

## set namespace name
namespace: lab

## Specify an imagePullPolicy (Required)
## It's recommended to change this to 'Always' if the image tag is 'latest'
## ref: http://kubernetes.io/docs/user-guide/images/#updating-images
image:
  repository: nginx
  pullPolicy: Always
  tag: "5.7.30"

## Set strategy for deployment
strategy:
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1
    #maxSurge: 25%
    #maxUnavailable: 25%
#strategy:
#  type: Recreate

## please add approprite label name
labels:
  team: myteam@greentube.com
  env: prod  

# Optionally specify an array of imagePullSecrets.
# Secrets must be manually created in the namespace.
# ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
imagePullSecrets: []
# - name: myRegistryKeySecretName

## Additionnal arguments that are passed to the container.
args: []
  #- "-xms=10m -xmx=100m"

## Additionnal arguments that are passed to the container.
command: []
  #- "bin/bash"
  #- "-c"
  #- "touch /tmp/healthy; touch /tmp/liveness; while true; do echo .; sleep 1; done"

## enable istio sidecar
istio:
  enabled: false

## Pods Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "default"

## if you have set annotation
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
  #haproxy.router.openshift.io/disable_cookies: 'true'
  #haproxy.router.openshift.io/balance: 'leastconn'
  #haproxy.router.openshift.io/timeout: 5s


## Pod level security Context
podSecurityContext: {}
  # fsGroup: 2000
  # capabilities:
  #   drop:
  #   - ALL
  # runAsNonRoot: true
  # runAsUser: 1000

## Container level security Context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## Configure container port
## ref: https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#exposing-pods-to-the-cluster
ports:
  - name: &referencedPortName http
    containerPort: &referencedPort 8080
    protocol: TCP

## Configure container probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
livenessProbe: []
  # httpGet:
  #   path: /
  #   port: *referencedPortName
  # failureThreshold: 10
  # initialDelaySeconds: 5
  # periodSeconds: 10
  # successThreshold: 1
  # timeoutSeconds: 5
####### OR #######
  # tcpSocket:
  #   port: *referencedPortName
  # failureThreshold: 10
  # initialDelaySeconds: 5
  # periodSeconds: 10
  # successThreshold: 1
  # timeoutSeconds: 5

readinessProbe: []
  # httpGet:
  #   path: /
  #   port: *referencedPortName
  # failureThreshold: 10
  # initialDelaySeconds: 5
  # periodSeconds: 10
  # successThreshold: 1
  # timeoutSeconds: 5
####### OR #######
  # tcpSocket:
  #   port: *referencedPortName
  # failureThreshold: 10
  # initialDelaySeconds: 5
  # periodSeconds: 10
  # successThreshold: 1
  # timeoutSeconds: 5

startupProbe: []
  #httpGet:
  #  path: /healthz
  #  port: *referencedPortName
  # failureThreshold: 10
  # initialDelaySeconds: 5
  # periodSeconds: 10
  # successThreshold: 1
  # timeoutSeconds: 5

## Configure the service
## ref: http://kubernetes.io/docs/user-guide/services/
service:
  type: ClusterIP
  ports:
  - port: *referencedPort
    targetPort: *referencedPortName
    protocol: TCP
    name: *referencedPortName

## Configure openshift route
## ref: http://kubernetes.io/docs/user-guide/services/
route:
  enabled: false
  targetServicePort: *referencedPortName
  tls:
    termination: passthrough
    insecureEdgeTerminationPolicy: Allow
    wildcardPolicy: None

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
resources: {}
   #limits:
   #  cpu: 100m
   #  memory: 128Mi
   #requests:
   #  cpu: 100m
   #  memory: 128Mi

## Pod autoscaling
## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

## Node selector
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}
  #disktype: ssd

## Tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []
  #- key: "example-key"
  #  operator: "Exists"
  #  effect: "NoSchedule"

## Affinity
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}
  #nodeAffinity:
  #  requiredDuringSchedulingIgnoredDuringExecution:
  #    nodeSelectorTerms:
  #    - matchExpressions:
  #      - key: kubernetes.io/e2e-az-name
  #        operator: In
  #        values:
  #        - e2e-az1
  #podAffinity:
  #  requiredDuringSchedulingIgnoredDuringExecution:
  #  - labelSelector:
  #      matchExpressions:
  #      - key: security
  #        operator: In
  #        values:
  #        - S1
  #    topologyKey: topology.kubernetes.io/zone
  #podAntiAffinity:
  #  preferredDuringSchedulingIgnoredDuringExecution:
  #  - weight: 100
  #    podAffinityTerm:
  #      labelSelector:
  #        matchExpressions:
  #        - key: security
  #          operator: In
  #          values:
  #          - S2

## pod envFrom
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables 
envFrom: []
  #- configMapRef:
  #    name: special-config
  #- secretRef:
  #    name: special-config

## pod env
## ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/#define-an-environment-variable-for-a-container
env: []
#- name: DEMO_GREETING
#  value: "Hello from the environment"
#- name: DEMO_FAREWELL
#  value: "Such a sweet sorrow"

## pod volume and volumemount
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-pod
volumes: []
  #- name: task-pv-storage
  #  persistentVolumeClaim:
  #    claimName: task-pv-claim

volumeMounts: []
  #- mountPath: "/usr/share/nginx/html"
  #  name: task-pv-storage


## add initContainers
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/#init-containers-in-use
initContainers: []
  #- name: init-myservice
  #  image: busybox:1.28
  #  command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]

## add sidecarContainers
sidecarContainers: []
  #- name: nginx
  #  image: nginx:1.14.2
  #  ports:
  #  - containerPort: 80

## if you add special parameter under the main container (lifecycle,hostAliases,hostPID, hostIPC,hostNetwork..etc)
extras: []
  #lifecycle:
  #  postStart:
  #    exec:
  #      command: ["/bin/sh", "-c", "cat /hosts >> /etc/hosts"]
  #--------------
  #hostAliases:
  #- ip: "127.0.0.1"
  #  hostnames:
  #  - "foo.local"
  #  - "bar.local"

## Persist data to a persistent volume
persistence:
  enabled: true
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 4Gi
  annotations: {}

conjur:
  enabled: false
  mode: &conjurMode "init"
  authnName: &conjurAuthnName ""
  CONJUR_AUTHN_URL: &conjurAuthnUrl '$(CONJUR_APPLIANCE_URL)/api/authn-k8s/$(authnName)'
  CONJUR_AUTHN_LOGIN: &conjurAuthnLogin ""
  conjurContainerName: &conjurContainerName "authenticator"
  containerImage: &containerImage "cyberark/conjur-authn-k8s-client"

conjurContainerConfig:
  - name: *conjurContainerName
    image: *containerImage
    env:
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MY_POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: CONTAINER_MODE
        value: *conjurMode
      - name: authnName
        value: *conjurAuthnName
      - name: CONJUR_AUTHN_URL
        value: *conjurAuthnUrl
      - name: CONJUR_AUTHN_LOGIN
        value: *conjurAuthnLogin
    envFrom:
    - configMapRef:
        name: conjur-connection
    volumeMounts:
      - name: conjur-access-token
        mountPath: /run/conjur
